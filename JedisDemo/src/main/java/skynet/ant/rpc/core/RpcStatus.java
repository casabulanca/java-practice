// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `RpcChannel.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package skynet.ant.rpc.core;

/**
 * RPC 状态
 **/
public class RpcStatus implements Cloneable, java.io.Serializable
{
    /**
     * 跟踪id（可以是业务Id）
     **/
    public String trackId;

    /**
     * 会话Id
     **/
    public String sessionId;

    /**
     * 状态 0:成功， 其他: 异常
     **/
    public int ok;

    /**
     * 具体自定义状态
     **/
    public String status;

    public RpcStatus()
    {
    }

    public RpcStatus(String trackId, String sessionId, int ok, String status)
    {
        this.trackId = trackId;
        this.sessionId = sessionId;
        this.ok = ok;
        this.status = status;
    }

    public boolean
    equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RpcStatus _r = null;
        if(rhs instanceof RpcStatus)
        {
            _r = (RpcStatus)rhs;
        }

        if(_r != null)
        {
            if(trackId != _r.trackId)
            {
                if(trackId == null || _r.trackId == null || !trackId.equals(_r.trackId))
                {
                    return false;
                }
            }
            if(sessionId != _r.sessionId)
            {
                if(sessionId == null || _r.sessionId == null || !sessionId.equals(_r.sessionId))
                {
                    return false;
                }
            }
            if(ok != _r.ok)
            {
                return false;
            }
            if(status != _r.status)
            {
                if(status == null || _r.status == null || !status.equals(_r.status))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::skynet::ant::rpc::core::RpcStatus");
        __h = IceInternal.HashUtil.hashAdd(__h, trackId);
        __h = IceInternal.HashUtil.hashAdd(__h, sessionId);
        __h = IceInternal.HashUtil.hashAdd(__h, ok);
        __h = IceInternal.HashUtil.hashAdd(__h, status);
        return __h;
    }

    public Object
    clone()
    {
        Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(trackId);
        __os.writeString(sessionId);
        __os.writeInt(ok);
        __os.writeString(status);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        trackId = __is.readString();
        sessionId = __is.readString();
        ok = __is.readInt();
        status = __is.readString();
    }

    public static final long serialVersionUID = -5950637126973102816L;
}
