// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `RpcChannel.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package skynet.ant.rpc.core;

/**
 * Rpc请求参数
 **/
public class RpcParam implements Cloneable, java.io.Serializable
{
    /**
     * 跟踪id（可以是业务Id）
     **/
    public String trackId;

    /**
     * 参数
     **/
    public String parameters;

    /**
     * 请求来自IP
     **/
    public String from;

    /**
     * 会话自定义上下文
     **/
    public byte[] context;

    /**
     * 结果响应回调代理
     **/
    public RpcResponsePrx callbackProxy;

    public RpcParam()
    {
    }

    public RpcParam(String trackId, String parameters, String from, byte[] context, RpcResponsePrx callbackProxy)
    {
        this.trackId = trackId;
        this.parameters = parameters;
        this.from = from;
        this.context = context;
        this.callbackProxy = callbackProxy;
    }

    public boolean
    equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        RpcParam _r = null;
        if(rhs instanceof RpcParam)
        {
            _r = (RpcParam)rhs;
        }

        if(_r != null)
        {
            if(trackId != _r.trackId)
            {
                if(trackId == null || _r.trackId == null || !trackId.equals(_r.trackId))
                {
                    return false;
                }
            }
            if(parameters != _r.parameters)
            {
                if(parameters == null || _r.parameters == null || !parameters.equals(_r.parameters))
                {
                    return false;
                }
            }
            if(from != _r.from)
            {
                if(from == null || _r.from == null || !from.equals(_r.from))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(context, _r.context))
            {
                return false;
            }
            if(callbackProxy != _r.callbackProxy)
            {
                if(callbackProxy == null || _r.callbackProxy == null || !callbackProxy.equals(_r.callbackProxy))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::skynet::ant::rpc::core::RpcParam");
        __h = IceInternal.HashUtil.hashAdd(__h, trackId);
        __h = IceInternal.HashUtil.hashAdd(__h, parameters);
        __h = IceInternal.HashUtil.hashAdd(__h, from);
        __h = IceInternal.HashUtil.hashAdd(__h, context);
        __h = IceInternal.HashUtil.hashAdd(__h, callbackProxy);
        return __h;
    }

    public Object
    clone()
    {
        Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(trackId);
        __os.writeString(parameters);
        __os.writeString(from);
        byteArrayHelper.write(__os, context);
        RpcResponsePrxHelper.__write(__os, callbackProxy);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        trackId = __is.readString();
        parameters = __is.readString();
        from = __is.readString();
        context = byteArrayHelper.read(__is);
        callbackProxy = RpcResponsePrxHelper.__read(__is);
    }

    public static final long serialVersionUID = -2252932117394825399L;
}
