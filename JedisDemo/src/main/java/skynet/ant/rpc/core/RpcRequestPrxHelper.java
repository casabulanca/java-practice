// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `RpcChannel.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package skynet.ant.rpc.core;

/**
 * 会话请求 
 **/
public final class RpcRequestPrxHelper extends Ice.ObjectPrxHelperBase implements RpcRequestPrx
{
    private static final String __begin_name = "begin";

    /**
     * 会话开始
     * @param param 会话请求参数 
     * @return 会话状态
     **/
    public RpcStatus begin(RpcParam param)
    {
        return begin(param, null, false);
    }

    /**
     * 会话开始
     * @param param 会话请求参数 
     * @param __ctx The Context map to send with the invocation.
     * @return 会话状态
     **/
    public RpcStatus begin(RpcParam param, java.util.Map<String, String> __ctx)
    {
        return begin(param, __ctx, true);
    }

    private RpcStatus begin(RpcParam param, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "begin", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("begin");
                    __delBase = __getDelegate(false);
                    _RpcRequestDel __del = (_RpcRequestDel)__delBase;
                    return __del.begin(param, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 会话开始
     * @param __cb The callback object for the operation.
     * @param param 会话请求参数 
     **/
    public Ice.AsyncResult begin_begin(RpcParam param)
    {
        return begin_begin(param, null, false, null);
    }

    /**
     * 会话开始
     * @param __cb The callback object for the operation.
     * @param param 会话请求参数 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_begin(RpcParam param, java.util.Map<String, String> __ctx)
    {
        return begin_begin(param, __ctx, true, null);
    }

    /**
     * 会话开始
     * @param __cb The callback object for the operation.
     * @param param 会话请求参数 
     **/
    public Ice.AsyncResult begin_begin(RpcParam param, Ice.Callback __cb)
    {
        return begin_begin(param, null, false, __cb);
    }

    /**
     * 会话开始
     * @param __cb The callback object for the operation.
     * @param param 会话请求参数 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_begin(RpcParam param, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_begin(param, __ctx, true, __cb);
    }

    /**
     * 会话开始
     * @param __cb The callback object for the operation.
     * @param param 会话请求参数 
     **/
    public Ice.AsyncResult begin_begin(RpcParam param, Callback_RpcRequest_begin __cb)
    {
        return begin_begin(param, null, false, __cb);
    }

    /**
     * 会话开始
     * @param __cb The callback object for the operation.
     * @param param 会话请求参数 
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_begin(RpcParam param, java.util.Map<String, String> __ctx, Callback_RpcRequest_begin __cb)
    {
        return begin_begin(param, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_begin(RpcParam param, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__begin_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __begin_name, __cb);
        try
        {
            __result.__prepare(__begin_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            param.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 会话状态
     **/
    public RpcStatus end_begin(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __begin_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            RpcStatus __ret;
            __ret = new RpcStatus();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __call_name = "call";

    /**
     * 通用远程方法
     * @param parameter 调用参数
     * @return 调用结果
     **/
    public byte[] call(byte[] parameter)
    {
        return call(parameter, null, false);
    }

    /**
     * 通用远程方法
     * @param parameter 调用参数
     * @param __ctx The Context map to send with the invocation.
     * @return 调用结果
     **/
    public byte[] call(byte[] parameter, java.util.Map<String, String> __ctx)
    {
        return call(parameter, __ctx, true);
    }

    private byte[] call(byte[] parameter, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "call", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("call");
                    __delBase = __getDelegate(false);
                    _RpcRequestDel __del = (_RpcRequestDel)__delBase;
                    return __del.call(parameter, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 通用远程方法
     * @param __cb The callback object for the operation.
     * @param parameter 调用参数
     **/
    public Ice.AsyncResult begin_call(byte[] parameter)
    {
        return begin_call(parameter, null, false, null);
    }

    /**
     * 通用远程方法
     * @param __cb The callback object for the operation.
     * @param parameter 调用参数
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_call(byte[] parameter, java.util.Map<String, String> __ctx)
    {
        return begin_call(parameter, __ctx, true, null);
    }

    /**
     * 通用远程方法
     * @param __cb The callback object for the operation.
     * @param parameter 调用参数
     **/
    public Ice.AsyncResult begin_call(byte[] parameter, Ice.Callback __cb)
    {
        return begin_call(parameter, null, false, __cb);
    }

    /**
     * 通用远程方法
     * @param __cb The callback object for the operation.
     * @param parameter 调用参数
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_call(byte[] parameter, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_call(parameter, __ctx, true, __cb);
    }

    /**
     * 通用远程方法
     * @param __cb The callback object for the operation.
     * @param parameter 调用参数
     **/
    public Ice.AsyncResult begin_call(byte[] parameter, Callback_RpcRequest_call __cb)
    {
        return begin_call(parameter, null, false, __cb);
    }

    /**
     * 通用远程方法
     * @param __cb The callback object for the operation.
     * @param parameter 调用参数
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_call(byte[] parameter, java.util.Map<String, String> __ctx, Callback_RpcRequest_call __cb)
    {
        return begin_call(parameter, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_call(byte[] parameter, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__call_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __call_name, __cb);
        try
        {
            __result.__prepare(__call_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            byteArrayHelper.write(__os, parameter);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 调用结果
     **/
    public byte[] end_call(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __call_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            byte[] __ret;
            __ret = byteArrayHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __end_name = "end";

    /**
     * 会话结束
     * @param sessionId 会话Id
     * @return 会话状态
     **/
    public RpcStatus end(String sessionId)
    {
        return end(sessionId, null, false);
    }

    /**
     * 会话结束
     * @param sessionId 会话Id
     * @param __ctx The Context map to send with the invocation.
     * @return 会话状态
     **/
    public RpcStatus end(String sessionId, java.util.Map<String, String> __ctx)
    {
        return end(sessionId, __ctx, true);
    }

    private RpcStatus end(String sessionId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "end", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("end");
                    __delBase = __getDelegate(false);
                    _RpcRequestDel __del = (_RpcRequestDel)__delBase;
                    return __del.end(sessionId, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 会话结束
     * @param __cb The callback object for the operation.
     * @param sessionId 会话Id
     **/
    public Ice.AsyncResult begin_end(String sessionId)
    {
        return begin_end(sessionId, null, false, null);
    }

    /**
     * 会话结束
     * @param __cb The callback object for the operation.
     * @param sessionId 会话Id
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_end(String sessionId, java.util.Map<String, String> __ctx)
    {
        return begin_end(sessionId, __ctx, true, null);
    }

    /**
     * 会话结束
     * @param __cb The callback object for the operation.
     * @param sessionId 会话Id
     **/
    public Ice.AsyncResult begin_end(String sessionId, Ice.Callback __cb)
    {
        return begin_end(sessionId, null, false, __cb);
    }

    /**
     * 会话结束
     * @param __cb The callback object for the operation.
     * @param sessionId 会话Id
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_end(String sessionId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_end(sessionId, __ctx, true, __cb);
    }

    /**
     * 会话结束
     * @param __cb The callback object for the operation.
     * @param sessionId 会话Id
     **/
    public Ice.AsyncResult begin_end(String sessionId, Callback_RpcRequest_end __cb)
    {
        return begin_end(sessionId, null, false, __cb);
    }

    /**
     * 会话结束
     * @param __cb The callback object for the operation.
     * @param sessionId 会话Id
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_end(String sessionId, java.util.Map<String, String> __ctx, Callback_RpcRequest_end __cb)
    {
        return begin_end(sessionId, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_end(String sessionId, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__end_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __end_name, __cb);
        try
        {
            __result.__prepare(__end_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sessionId);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 会话状态
     **/
    public RpcStatus end_end(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __end_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            RpcStatus __ret;
            __ret = new RpcStatus();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __post_name = "post";

    /**
     * 会话进行中
     * @param sessionId 会话Id
     * @param content 会话内容
     * @return 会话状态
     **/
    public RpcStatus post(String sessionId, byte[] content)
    {
        return post(sessionId, content, null, false);
    }

    /**
     * 会话进行中
     * @param sessionId 会话Id
     * @param content 会话内容
     * @param __ctx The Context map to send with the invocation.
     * @return 会话状态
     **/
    public RpcStatus post(String sessionId, byte[] content, java.util.Map<String, String> __ctx)
    {
        return post(sessionId, content, __ctx, true);
    }

    private RpcStatus post(String sessionId, byte[] content, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "post", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("post");
                    __delBase = __getDelegate(false);
                    _RpcRequestDel __del = (_RpcRequestDel)__delBase;
                    return __del.post(sessionId, content, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    /**
     * 会话进行中
     * @param __cb The callback object for the operation.
     * @param sessionId 会话Id
     **/
    public Ice.AsyncResult begin_post(String sessionId, byte[] content)
    {
        return begin_post(sessionId, content, null, false, null);
    }

    /**
     * 会话进行中
     * @param __cb The callback object for the operation.
     * @param sessionId 会话Id
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_post(String sessionId, byte[] content, java.util.Map<String, String> __ctx)
    {
        return begin_post(sessionId, content, __ctx, true, null);
    }

    /**
     * 会话进行中
     * @param __cb The callback object for the operation.
     * @param sessionId 会话Id
     **/
    public Ice.AsyncResult begin_post(String sessionId, byte[] content, Ice.Callback __cb)
    {
        return begin_post(sessionId, content, null, false, __cb);
    }

    /**
     * 会话进行中
     * @param __cb The callback object for the operation.
     * @param sessionId 会话Id
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_post(String sessionId, byte[] content, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_post(sessionId, content, __ctx, true, __cb);
    }

    /**
     * 会话进行中
     * @param __cb The callback object for the operation.
     * @param sessionId 会话Id
     **/
    public Ice.AsyncResult begin_post(String sessionId, byte[] content, Callback_RpcRequest_post __cb)
    {
        return begin_post(sessionId, content, null, false, __cb);
    }

    /**
     * 会话进行中
     * @param __cb The callback object for the operation.
     * @param sessionId 会话Id
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_post(String sessionId, byte[] content, java.util.Map<String, String> __ctx, Callback_RpcRequest_post __cb)
    {
        return begin_post(sessionId, content, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_post(String sessionId, byte[] content, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__post_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __post_name, __cb);
        try
        {
            __result.__prepare(__post_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(sessionId);
            byteArrayHelper.write(__os, content);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) 会话状态
     **/
    public RpcStatus end_post(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __post_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            RpcStatus __ret;
            __ret = new RpcStatus();
            __ret.__read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static RpcRequestPrx checkedCast(Ice.ObjectPrx __obj)
    {
        RpcRequestPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof RpcRequestPrx)
            {
                __d = (RpcRequestPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    RpcRequestPrxHelper __h = new RpcRequestPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static RpcRequestPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        RpcRequestPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof RpcRequestPrx)
            {
                __d = (RpcRequestPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    RpcRequestPrxHelper __h = new RpcRequestPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static RpcRequestPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        RpcRequestPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    RpcRequestPrxHelper __h = new RpcRequestPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static RpcRequestPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        RpcRequestPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    RpcRequestPrxHelper __h = new RpcRequestPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static RpcRequestPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        RpcRequestPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof RpcRequestPrx)
            {
                __d = (RpcRequestPrx)__obj;
            }
            else
            {
                RpcRequestPrxHelper __h = new RpcRequestPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static RpcRequestPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        RpcRequestPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            RpcRequestPrxHelper __h = new RpcRequestPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::skynet::ant::rpc::core::RpcRequest"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _RpcRequestDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _RpcRequestDelD();
    }

    public static void __write(IceInternal.BasicStream __os, RpcRequestPrx v)
    {
        __os.writeProxy(v);
    }

    public static RpcRequestPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            RpcRequestPrxHelper result = new RpcRequestPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
